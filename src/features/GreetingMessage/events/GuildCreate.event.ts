import { ActionRowBuilder, ButtonBuilder, ButtonInteraction, ButtonStyle, ComponentType, EmbedBuilder, Guild, PermissionFlagsBits, TextChannel } from "discord.js";
import { BotClient } from "../../../classes/Client.class";
import { config } from "../../../config/config";

export default class GuildCreate {
    constructor(client: BotClient){
        client.on("guildCreate", async(guild: Guild) => {
            const systemChannel = guild.channels.cache.get(guild.systemChannelId ?? "");
            const me = guild.members.me;

            if(!systemChannel) return;
            if(!me) return;
            if(!systemChannel.permissionsFor(me).has(PermissionFlagsBits.SendMessages)) return;
            
            if(systemChannel){
                const embed = new EmbedBuilder()
                    .setAuthor({name: "‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏ç‡∏ö‡∏≠‡∏ó Kwan's 2 ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡πà‡∏∞‡∏Ñ‡∏∞", iconURL: client.user?.displayAvatarURL()})
                    .setDescription(`Kwan's 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n‡πÄ‡∏Å‡∏°‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î ‡πÄ‡∏û‡∏•‡∏á ‡πÄ‡πÄ‡∏•‡∏∞‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î NSFW ‡∏Ñ‡πà‡∏∞\n‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏à‡∏∞‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÇ‡∏°‡πâ‡∏•‡∏≠‡∏á‡∏°‡∏≤‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡πÑ‡∏´‡∏°‡∏Ñ‡πà‡∏∞`)
                    .setColor(config.assets.embed.default.color)
                    .addFields({name: "üïπ | ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ", value: `\` /help \``, inline: true})
                    .setImage(config.assets.rainbowLine1)
                    .setFooter({text: client.user?.username ?? ""})
                    .setTimestamp();

                let binvite = new ButtonBuilder()
                    .setStyle(ButtonStyle.Link)
                    .setLabel('Invite')
                    .setEmoji(`üöÄ`)
                    .setURL(config.informations.inviteLink);
                let bsupport = new ButtonBuilder()
                    .setStyle(ButtonStyle.Link)
                    .setLabel('Support')
                    .setEmoji(`‚òé`)
                    .setURL(config.informations.supportLink);
                let bclose = new ButtonBuilder()
                    .setLabel(`Close`)
                    .setCustomId(`close`)
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji(`üóëÔ∏è`);
                let row = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(bclose, bsupport, binvite);

                const greetingMessage = await (systemChannel as TextChannel).send({
                    embeds: [ embed ],
                    components: [ row ]
                });

                const collector = greetingMessage.createMessageComponentCollector({ componentType: ComponentType.Button });
                collector.on('collect', async (b: ButtonInteraction) => {
                    if(b.customId == 'close'){
                        greetingMessage.delete();
                    } 
                    await b.deferUpdate();
                });
            }
        });
    }
}